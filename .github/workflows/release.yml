name: Semantic Release

on:
  push:
    branches:
      - main

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install poetry
        run: pipx install poetry
      - name: Install tox
        run: pipx install tox
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: "poetry"
      - name: Install dependencies
        run: poetry install
      - name: Create .env file
        run: |
          echo API_KEY_NAME="${{ secrets.INTEGRATION_TEST_API_KEY_NAME }}" >> .env
          echo API_KEY="${{ secrets.INTEGRATION_TEST_API_KEY }}" >> .env
      - name: Run Integration Tests
        run: tox -e integration
      - name: Create version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          poetry run semantic-release version --no-changelog

          NEXT_VERSION=$(poetry run semantic-release --noop version --print-tag)
          NEXT_VERSION_NO_PREFIX=${NEXT_VERSION#v}
          echo "Next version: ${NEXT_VERSION_NO_PREFIX}"

          if curl -s https://pypi.org/pypi/junglescout-client/json | jq -r '.releases | keys[]' | grep -q "^${NEXT_VERSION_NO_PREFIX}$"; then
            echo "SHOULD_PUBLISH=0" >> $GITHUB_ENV
            echo "Version ${NEXT_VERSION_NO_PREFIX} already exists on PyPI"
          else
            echo "SHOULD_PUBLISH=1" >> $GITHUB_ENV
            echo "New version ${NEXT_VERSION_NO_PREFIX} does not exist on PyPI"
          fi
      - name: Publish to PyPI
        if: env.SHOULD_PUBLISH == '1'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry build --clean
          poetry publish --no-interaction
